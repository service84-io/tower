exdef S84.Tower.System.ctcode;
exdef S84.Tower.Generator.ctcode;
exdef S84.Tower.Generator.CPPGenerator.ctcode;
exdef S84.Tower.Generator.CTCodeGenerator.ctcode;
exdef S84.Tower.Generator.LogToConsole.ctcode;
exdef S84.Tower.dbnf.ctcode;

class Main
{
    function S84.Tower.Generator.ctcode.Generator GetCPPGenerator() {
        return new S84.Tower.Generator.CPPGenerator.ctcode.CPPGenerator;
    }

    function S84.Tower.Generator.ctcode.Generator GetCTCodeGenerator() {
        return new S84.Tower.Generator.CTCodeGenerator.ctcode.CTCodeGenerator;
    }

    function S84.Tower.Generator.ctcode.Generator GetLogToConsole() {
        return new S84.Tower.Generator.LogToConsole.ctcode.LogToConsole;
    }

    function int RunMain(S84.Tower.System.ctcode.System system, string dbnf_file_name, string generator) {
        S84.Tower.System.ctcode.OutputStream logger = system.GetLoggerDestination();

        S84.Tower.Generator.ctcode.Generator{} generators;

        SetKV(generators, "CPPGenerator", myself.GetCPPGenerator());
        SetKV(generators, "CTCodeGenerator", myself.GetCTCodeGenerator());
        SetKV(generators, "LogToConsole", myself.GetLogToConsole());

        if (dbnf_file_name == "" || !HasKV(generators, generator)) {
            logger.WriteLine("tower <DBNF_File> <Generator>");
            logger.WriteLine("Known generators:");

            string[] registered_generators = Keys(generators);

            int index = 0;

            while (index < Size(registered_generators)) {
                logger.WriteLine(Concat("    ", Element(registered_generators, index)));
                index = index + 1;
            }

            return 1;
        }

        string dbnf = system.ReadFileToString(dbnf_file_name);

        if (dbnf == "") {
            logger.WriteLine(Concat("The file ", Concat(dbnf_file_name, " is empty or does not exist.")));
            return 1;
        }

        S84.Tower.dbnf.ctcode.LargeString dbnf_large_string = new S84.Tower.dbnf.ctcode.LargeString;
        dbnf_large_string.SetData(dbnf);
        S84.Tower.dbnf.ctcode.LengthString index = new S84.Tower.dbnf.ctcode.LengthString;
        index.SetData(dbnf_large_string);
        index.SetStart(0);
        index.SetLength(Length(dbnf));
        S84.Tower.dbnf.ctcode.ParserNetwork parser_network = new S84.Tower.dbnf.ctcode.ParserNetwork;
        parser_network.Initialize();
        S84.Tower.dbnf.ctcode.GrammarResult grammar_result = new S84.Tower.dbnf.ctcode.GrammarResult;
        S84.Tower.dbnf.ctcode.GrammarParser grammar_parser = parser_network.GetGrammarParser();
        logger.WriteLine("Parsing Grammar...");
        grammar_parser.ParseSingleSave(index, grammar_result);

        if (grammar_result.GetResult() && index.GetLength() == 0) {
            logger.WriteLine("Done Parsing Grammar!");
            S84.Tower.Generator.ctcode.Generator target_generator = GetKV(generators, generator);
            return target_generator.GenerateParser(system, grammar_result.GetValue(), dbnf_file_name);
        } else {
            logger.WriteLine(Concat("Failed to parse ", Concat(dbnf_file_name, ".")));
            return 1;
        }
    }
}
