class StringParser
{
    function bool ParseSingleSave(LengthString index, string value, StringResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LargeString index_data = index.GetData();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        String instance = new String;
        int value_length = Length(value);

        if (value_length > index.GetLength())
        {
            result.SetResult(false);
            return false;
        }

        int offset_index = 0;

        while (offset_index < value_length)
        {
            if (At(index_data.GetData(), index.GetStart() + offset_index) != At(value, offset_index))
            {
                result.SetResult(false);
                return false;
            }

            offset_index = offset_index + 1;
        }

        index.SetStart(index.GetStart() + value_length);
        index.SetLength(index.GetLength() - value_length);
        consumed_string.SetLength(index.GetStart() - index_start);
        instance.SetLengthString(consumed_string);
        result.SetValue(instance);
        result.SetResult(true);
        return true;
    }
    function bool ParseSingle(LengthString index, string value)
    {
        StringResult result = new StringResult;
        return ParseSingleSave(index, value, result);
    }
}

class StringResult
{
    function void SetValue(String new_value) { value = new_value; }
    function String GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    String value;
    bool result;
}

class StringListResult
{
    function void SetValue(String[] new_value) { value = new_value; }
    function String[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    String[] value;
    bool result;
}

class String
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class CharacterParser
{
    function bool ParseSingle(LengthString index, int value)
    {
        if (0 == index.GetLength())
        {
            return false;
        }

        LargeString index_data = index.GetData();
        int current_character = IntAt(index_data.GetData(), index.GetStart());

        if (current_character == value)
        {
            index.SetStart(index.GetStart() + 1);
            index.SetLength(index.GetLength() - 1);
            return true;
        }

        return false;
    }
}

class CharacterResult
{
    function void SetValue(Character new_value) { value = new_value; }
    function Character GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Character value;
    bool result;
}

class CharacterListResult
{
    function void SetValue(Character[] new_value) { value = new_value; }
    function Character[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Character[] value;
    bool result;
}

class Character
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class CharacterRangeParser
{
    function bool ParseSingle(LengthString index, int low_value, int high_value)
    {
        if (0 == index.GetLength())
        {
            return false;
        }

        LargeString index_data = index.GetData();
        int current_character = IntAt(index_data.GetData(), index.GetStart());

        if (low_value <= current_character && current_character <= high_value)
        {
            index.SetStart(index.GetStart() + 1);
            index.SetLength(index.GetLength() - 1);
            return true;
        }

        return false;
    }
}

class CharacterRangeResult
{
    function void SetValue(CharacterRange new_value) { value = new_value; }
    function CharacterRange GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    CharacterRange value;
    bool result;
}

class CharacterRangeListResult
{
    function void SetValue(CharacterRange[] new_value) { value = new_value; }
    function CharacterRange[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    CharacterRange[] value;
    bool result;
}

class CharacterRange
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class ParserNetwork
{
    GrammarParser grammar_parser_field;
    function GrammarParser GetGrammarParser() { return grammar_parser_field; }
    RuleParser rule_parser_field;
    function RuleParser GetRuleParser() { return rule_parser_field; }
    ExpressionParser expression_parser_field;
    function ExpressionParser GetExpressionParser() { return expression_parser_field; }
    TokenParser token_parser_field;
    function TokenParser GetTokenParser() { return token_parser_field; }
    SimpleTokenParser simple_token_parser_field;
    function SimpleTokenParser GetSimpleTokenParser() { return simple_token_parser_field; }
    ModifierParser modifier_parser_field;
    function ModifierParser GetModifierParser() { return modifier_parser_field; }
    CardinalityParser cardinality_parser_field;
    function CardinalityParser GetCardinalityParser() { return cardinality_parser_field; }
    NameParser name_parser_field;
    function NameParser GetNameParser() { return name_parser_field; }
    NameCharacterParser name_character_parser_field;
    function NameCharacterParser GetNameCharacterParser() { return name_character_parser_field; }
    NumberParser number_parser_field;
    function NumberParser GetNumberParser() { return number_parser_field; }
    DigitParser digit_parser_field;
    function DigitParser GetDigitParser() { return digit_parser_field; }
    PunctuationParser punctuation_parser_field;
    function PunctuationParser GetPunctuationParser() { return punctuation_parser_field; }
    CommentCharacterParser comment_character_parser_field;
    function CommentCharacterParser GetCommentCharacterParser() { return comment_character_parser_field; }
    CommentParser comment_parser_field;
    function CommentParser GetCommentParser() { return comment_parser_field; }
    LiteralParser literal_parser_field;
    function LiteralParser GetLiteralParser() { return literal_parser_field; }
    LiteralCharacterParser literal_character_parser_field;
    function LiteralCharacterParser GetLiteralCharacterParser() { return literal_character_parser_field; }
    HexDigitParser hex_digit_parser_field;
    function HexDigitParser GetHexDigitParser() { return hex_digit_parser_field; }
    WhitespaceParser whitespace_parser_field;
    function WhitespaceParser GetWhitespaceParser() { return whitespace_parser_field; }
    EolParser eol_parser_field;
    function EolParser GetEolParser() { return eol_parser_field; }
    StringParser string_parser_field;
    function StringParser GetStringParser() { return string_parser_field;}
    CharacterParser character_parser_field;
    function CharacterParser GetCharacterParser() { return character_parser_field;}
    CharacterRangeParser character_range_parser_field;
    function CharacterRangeParser GetCharacterRangeParser() { return character_range_parser_field;}
    function void Initialize() {
        grammar_parser_field = new GrammarParser;
        grammar_parser_field.SetParserNetwork(myself);
        rule_parser_field = new RuleParser;
        rule_parser_field.SetParserNetwork(myself);
        expression_parser_field = new ExpressionParser;
        expression_parser_field.SetParserNetwork(myself);
        token_parser_field = new TokenParser;
        token_parser_field.SetParserNetwork(myself);
        simple_token_parser_field = new SimpleTokenParser;
        simple_token_parser_field.SetParserNetwork(myself);
        modifier_parser_field = new ModifierParser;
        modifier_parser_field.SetParserNetwork(myself);
        cardinality_parser_field = new CardinalityParser;
        cardinality_parser_field.SetParserNetwork(myself);
        name_parser_field = new NameParser;
        name_parser_field.SetParserNetwork(myself);
        name_character_parser_field = new NameCharacterParser;
        name_character_parser_field.SetParserNetwork(myself);
        number_parser_field = new NumberParser;
        number_parser_field.SetParserNetwork(myself);
        digit_parser_field = new DigitParser;
        digit_parser_field.SetParserNetwork(myself);
        punctuation_parser_field = new PunctuationParser;
        punctuation_parser_field.SetParserNetwork(myself);
        comment_character_parser_field = new CommentCharacterParser;
        comment_character_parser_field.SetParserNetwork(myself);
        comment_parser_field = new CommentParser;
        comment_parser_field.SetParserNetwork(myself);
        literal_parser_field = new LiteralParser;
        literal_parser_field.SetParserNetwork(myself);
        literal_character_parser_field = new LiteralCharacterParser;
        literal_character_parser_field.SetParserNetwork(myself);
        hex_digit_parser_field = new HexDigitParser;
        hex_digit_parser_field.SetParserNetwork(myself);
        whitespace_parser_field = new WhitespaceParser;
        whitespace_parser_field.SetParserNetwork(myself);
        eol_parser_field = new EolParser;
        eol_parser_field.SetParserNetwork(myself);
        string_parser_field = new StringParser;
        character_parser_field = new CharacterParser;
    }
}

class DBNFOmniType
{
    Grammar grammar_field;
    function void SetGrammar(Grammar input_value) { grammar_field = input_value; }
    function Grammar GetGrammar() { return grammar_field; }
    Rule rule_field;
    function void SetRule(Rule input_value) { rule_field = input_value; }
    function Rule GetRule() { return rule_field; }
    Expression expression_field;
    function void SetExpression(Expression input_value) { expression_field = input_value; }
    function Expression GetExpression() { return expression_field; }
    Token token_field;
    function void SetToken(Token input_value) { token_field = input_value; }
    function Token GetToken() { return token_field; }
    SimpleToken simple_token_field;
    function void SetSimpleToken(SimpleToken input_value) { simple_token_field = input_value; }
    function SimpleToken GetSimpleToken() { return simple_token_field; }
    Modifier modifier_field;
    function void SetModifier(Modifier input_value) { modifier_field = input_value; }
    function Modifier GetModifier() { return modifier_field; }
    Cardinality cardinality_field;
    function void SetCardinality(Cardinality input_value) { cardinality_field = input_value; }
    function Cardinality GetCardinality() { return cardinality_field; }
    Name name_field;
    function void SetName(Name input_value) { name_field = input_value; }
    function Name GetName() { return name_field; }
    NameCharacter name_character_field;
    function void SetNameCharacter(NameCharacter input_value) { name_character_field = input_value; }
    function NameCharacter GetNameCharacter() { return name_character_field; }
    Number number_field;
    function void SetNumber(Number input_value) { number_field = input_value; }
    function Number GetNumber() { return number_field; }
    Digit digit_field;
    function void SetDigit(Digit input_value) { digit_field = input_value; }
    function Digit GetDigit() { return digit_field; }
    Punctuation punctuation_field;
    function void SetPunctuation(Punctuation input_value) { punctuation_field = input_value; }
    function Punctuation GetPunctuation() { return punctuation_field; }
    CommentCharacter comment_character_field;
    function void SetCommentCharacter(CommentCharacter input_value) { comment_character_field = input_value; }
    function CommentCharacter GetCommentCharacter() { return comment_character_field; }
    Comment comment_field;
    function void SetComment(Comment input_value) { comment_field = input_value; }
    function Comment GetComment() { return comment_field; }
    Literal literal_field;
    function void SetLiteral(Literal input_value) { literal_field = input_value; }
    function Literal GetLiteral() { return literal_field; }
    LiteralCharacter literal_character_field;
    function void SetLiteralCharacter(LiteralCharacter input_value) { literal_character_field = input_value; }
    function LiteralCharacter GetLiteralCharacter() { return literal_character_field; }
    HexDigit hex_digit_field;
    function void SetHexDigit(HexDigit input_value) { hex_digit_field = input_value; }
    function HexDigit GetHexDigit() { return hex_digit_field; }
    Whitespace whitespace_field;
    function void SetWhitespace(Whitespace input_value) { whitespace_field = input_value; }
    function Whitespace GetWhitespace() { return whitespace_field; }
    Eol eol_field;
    function void SetEol(Eol input_value) { eol_field = input_value; }
    function Eol GetEol() { return eol_field; }
}

class DBNFOmniTypeResult
{
    function void SetValue(DBNFOmniType new_value) { value = new_value; }
    function DBNFOmniType GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }
    function void SetGrammar(Grammar input_value)
    {
        value = new DBNFOmniType;
        value.SetGrammar(input_value);
    }
    function void SetRule(Rule input_value)
    {
        value = new DBNFOmniType;
        value.SetRule(input_value);
    }
    function void SetExpression(Expression input_value)
    {
        value = new DBNFOmniType;
        value.SetExpression(input_value);
    }
    function void SetToken(Token input_value)
    {
        value = new DBNFOmniType;
        value.SetToken(input_value);
    }
    function void SetSimpleToken(SimpleToken input_value)
    {
        value = new DBNFOmniType;
        value.SetSimpleToken(input_value);
    }
    function void SetModifier(Modifier input_value)
    {
        value = new DBNFOmniType;
        value.SetModifier(input_value);
    }
    function void SetCardinality(Cardinality input_value)
    {
        value = new DBNFOmniType;
        value.SetCardinality(input_value);
    }
    function void SetName(Name input_value)
    {
        value = new DBNFOmniType;
        value.SetName(input_value);
    }
    function void SetNameCharacter(NameCharacter input_value)
    {
        value = new DBNFOmniType;
        value.SetNameCharacter(input_value);
    }
    function void SetNumber(Number input_value)
    {
        value = new DBNFOmniType;
        value.SetNumber(input_value);
    }
    function void SetDigit(Digit input_value)
    {
        value = new DBNFOmniType;
        value.SetDigit(input_value);
    }
    function void SetPunctuation(Punctuation input_value)
    {
        value = new DBNFOmniType;
        value.SetPunctuation(input_value);
    }
    function void SetCommentCharacter(CommentCharacter input_value)
    {
        value = new DBNFOmniType;
        value.SetCommentCharacter(input_value);
    }
    function void SetComment(Comment input_value)
    {
        value = new DBNFOmniType;
        value.SetComment(input_value);
    }
    function void SetLiteral(Literal input_value)
    {
        value = new DBNFOmniType;
        value.SetLiteral(input_value);
    }
    function void SetLiteralCharacter(LiteralCharacter input_value)
    {
        value = new DBNFOmniType;
        value.SetLiteralCharacter(input_value);
    }
    function void SetHexDigit(HexDigit input_value)
    {
        value = new DBNFOmniType;
        value.SetHexDigit(input_value);
    }
    function void SetWhitespace(Whitespace input_value)
    {
        value = new DBNFOmniType;
        value.SetWhitespace(input_value);
    }
    function void SetEol(Eol input_value)
    {
        value = new DBNFOmniType;
        value.SetEol(input_value);
    }

    DBNFOmniType value;
    bool result;
}

class DBNFOmniTypeListResult
{
    function void SetValue(DBNFOmniType[] new_value) { value = new_value; }
    function DBNFOmniType[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }
    function void SetGrammar(Grammar[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetGrammar(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetRule(Rule[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetRule(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetExpression(Expression[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetExpression(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetToken(Token[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetToken(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetSimpleToken(SimpleToken[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetSimpleToken(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetModifier(Modifier[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetModifier(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetCardinality(Cardinality[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetCardinality(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetName(Name[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetName(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetNameCharacter(NameCharacter[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetNameCharacter(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetNumber(Number[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetNumber(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetDigit(Digit[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetDigit(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetPunctuation(Punctuation[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetPunctuation(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetCommentCharacter(CommentCharacter[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetCommentCharacter(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetComment(Comment[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetComment(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetLiteral(Literal[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetLiteral(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetLiteralCharacter(LiteralCharacter[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetLiteralCharacter(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetHexDigit(HexDigit[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetHexDigit(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetWhitespace(Whitespace[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetWhitespace(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetEol(Eol[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetEol(Element(input_value, index));
            index = index + 1;
        }
    }

    DBNFOmniType[] value;
    bool result;
}

class LargeString
{
    function void SetData(string new_data) { data = new_data; }
    function string GetData() { return data; }

    string data;
}

class LengthString
{
    function void SetData(LargeString new_data) { data = new_data; }
    function LargeString GetData() { return data; }
    function void SetStart(int new_start) { start = new_start; }
    function int GetStart() { return start; }
    function void SetLength(int new_length) { length = new_length; }
    function int GetLength() { return length; }
    function string GetString()
    {
        string deep_data = data.GetData();
        string result;
        int index = start;
        int end = start + length;

        while (index < end)
        {
            result = Concat(result, At(deep_data, index));
            index = index + 1;
        }

        return result;
    }

    LargeString data;
    int start;
    int length;
}

class GrammarParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, GrammarResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Grammar instance = new Grammar;
        RuleListResult rules_field = new RuleListResult;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && rule_parser_instance.ParseManySave(index, rules_field, 0, -1)) {
            instance.SetRules(rules_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            rules_field = new RuleListResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        GrammarResult result = new GrammarResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, GrammarResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        GrammarResult result = new GrammarResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, GrammarListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Grammar[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            GrammarResult result = new GrammarResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        GrammarListResult result = new GrammarListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class GrammarResult
{
    function void SetValue(Grammar new_value) { value = new_value; }
    function Grammar GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Grammar value;
    bool result;
}

class GrammarListResult
{
    function void SetValue(Grammar[] new_value) { value = new_value; }
    function Grammar[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Grammar[] value;
    bool result;
}

class Grammar
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetRules(Rule[] input_value) { rules_field = input_value; }
    function Rule[] GetRules() { return rules_field; }

    LengthString length_string;
    Rule[] rules_field;
}

class RuleParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, RuleResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Rule instance = new Rule;
        ExpressionListResult expressions_field = new ExpressionListResult;
        NameResult name_field = new NameResult;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "<") && name_parser_instance.ParseSingleSave(index, name_field) && string_parser_instance.ParseSingle(index, ">") && expression_parser_instance.ParseManySave(index, expressions_field, 0, -1)) {
            instance.SetExpressions(expressions_field.GetValue());
            instance.SetName(name_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            expressions_field = new ExpressionListResult;
            name_field = new NameResult;
        }

        if (true && comment_parser_instance.ParseSingle(index)) {
            instance.SetExpressions(expressions_field.GetValue());
            instance.SetName(name_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            expressions_field = new ExpressionListResult;
            name_field = new NameResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        RuleResult result = new RuleResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, RuleResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        RuleResult result = new RuleResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, RuleListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Rule[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            RuleResult result = new RuleResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        RuleListResult result = new RuleListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class RuleResult
{
    function void SetValue(Rule new_value) { value = new_value; }
    function Rule GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Rule value;
    bool result;
}

class RuleListResult
{
    function void SetValue(Rule[] new_value) { value = new_value; }
    function Rule[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Rule[] value;
    bool result;
}

class Rule
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetExpressions(Expression[] input_value) { expressions_field = input_value; }
    function Expression[] GetExpressions() { return expressions_field; }
    function void SetName(Name input_value) { name_field = input_value; }
    function Name GetName() { return name_field; }

    LengthString length_string;
    Expression[] expressions_field;
    Name name_field;
}

class ExpressionParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ExpressionResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Expression instance = new Expression;
        StringResult expression_discriminator_field = new StringResult;
        TokenListResult token_sequence_field = new TokenListResult;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingleSave(index, "::=", expression_discriminator_field) && token_parser_instance.ParseManySave(index, token_sequence_field, 0, -1) && eol_parser_instance.ParseSingle(index)) {
            instance.SetExpressionDiscriminator(expression_discriminator_field.GetValue());
            instance.SetTokenSequence(token_sequence_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            expression_discriminator_field = new StringResult;
            token_sequence_field = new TokenListResult;
        }

        if (true && comment_parser_instance.ParseSingle(index)) {
            instance.SetExpressionDiscriminator(expression_discriminator_field.GetValue());
            instance.SetTokenSequence(token_sequence_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            expression_discriminator_field = new StringResult;
            token_sequence_field = new TokenListResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ExpressionResult result = new ExpressionResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ExpressionResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ExpressionResult result = new ExpressionResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ExpressionListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Expression[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ExpressionResult result = new ExpressionResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ExpressionListResult result = new ExpressionListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ExpressionResult
{
    function void SetValue(Expression new_value) { value = new_value; }
    function Expression GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Expression value;
    bool result;
}

class ExpressionListResult
{
    function void SetValue(Expression[] new_value) { value = new_value; }
    function Expression[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Expression[] value;
    bool result;
}

class Expression
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetExpressionDiscriminator(String input_value) { expression_discriminator_field = input_value; }
    function String GetExpressionDiscriminator() { return expression_discriminator_field; }
    function void SetTokenSequence(Token[] input_value) { token_sequence_field = input_value; }
    function Token[] GetTokenSequence() { return token_sequence_field; }

    LengthString length_string;
    String expression_discriminator_field;
    Token[] token_sequence_field;
}

class TokenParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, TokenResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Token instance = new Token;
        ModifierResult modifier_field = new ModifierResult;
        NameResult name_field = new NameResult;
        SimpleTokenResult value_field = new SimpleTokenResult;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "attribute") && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "(") && whitespace_parser_instance.ParseMany(index, 0, -1) && name_parser_instance.ParseSingleSave(index, name_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && simple_token_parser_instance.ParseSingleSave(index, value_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && modifier_parser_instance.ParseSingleSave(index, modifier_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ")") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetModifier(modifier_field.GetValue());
            instance.SetName(name_field.GetValue());
            instance.SetValue(value_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            modifier_field = new ModifierResult;
            name_field = new NameResult;
            value_field = new SimpleTokenResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "attribute") && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "(") && whitespace_parser_instance.ParseMany(index, 0, -1) && name_parser_instance.ParseSingleSave(index, name_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && simple_token_parser_instance.ParseSingleSave(index, value_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ")") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetModifier(modifier_field.GetValue());
            instance.SetName(name_field.GetValue());
            instance.SetValue(value_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            modifier_field = new ModifierResult;
            name_field = new NameResult;
            value_field = new SimpleTokenResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && simple_token_parser_instance.ParseSingleSave(index, value_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && modifier_parser_instance.ParseSingleSave(index, modifier_field) && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetModifier(modifier_field.GetValue());
            instance.SetName(name_field.GetValue());
            instance.SetValue(value_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            modifier_field = new ModifierResult;
            name_field = new NameResult;
            value_field = new SimpleTokenResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && simple_token_parser_instance.ParseSingleSave(index, value_field) && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetModifier(modifier_field.GetValue());
            instance.SetName(name_field.GetValue());
            instance.SetValue(value_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            modifier_field = new ModifierResult;
            name_field = new NameResult;
            value_field = new SimpleTokenResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        TokenResult result = new TokenResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, TokenResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        TokenResult result = new TokenResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, TokenListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Token[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            TokenResult result = new TokenResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        TokenListResult result = new TokenListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class TokenResult
{
    function void SetValue(Token new_value) { value = new_value; }
    function Token GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Token value;
    bool result;
}

class TokenListResult
{
    function void SetValue(Token[] new_value) { value = new_value; }
    function Token[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Token[] value;
    bool result;
}

class Token
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetModifier(Modifier input_value) { modifier_field = input_value; }
    function Modifier GetModifier() { return modifier_field; }
    function void SetName(Name input_value) { name_field = input_value; }
    function Name GetName() { return name_field; }
    function void SetValue(SimpleToken input_value) { value_field = input_value; }
    function SimpleToken GetValue() { return value_field; }

    LengthString length_string;
    Modifier modifier_field;
    Name name_field;
    SimpleToken value_field;
}

class SimpleTokenParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, SimpleTokenResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        SimpleToken instance = new SimpleToken;
        HexDigitResult high_field = new HexDigitResult;
        HexDigitResult high_high_field = new HexDigitResult;
        HexDigitResult high_low_field = new HexDigitResult;
        LiteralResult literal_field = new LiteralResult;
        HexDigitResult low_field = new HexDigitResult;
        HexDigitResult low_high_field = new HexDigitResult;
        HexDigitResult low_low_field = new HexDigitResult;
        NameResult token_field = new NameResult;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && string_parser_instance.ParseSingle(index, "<") && name_parser_instance.ParseSingleSave(index, token_field) && string_parser_instance.ParseSingle(index, ">")) {
            instance.SetHigh(high_field.GetValue());
            instance.SetHighHigh(high_high_field.GetValue());
            instance.SetHighLow(high_low_field.GetValue());
            instance.SetLiteral(literal_field.GetValue());
            instance.SetLow(low_field.GetValue());
            instance.SetLowHigh(low_high_field.GetValue());
            instance.SetLowLow(low_low_field.GetValue());
            instance.SetToken(token_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            high_field = new HexDigitResult;
            high_high_field = new HexDigitResult;
            high_low_field = new HexDigitResult;
            literal_field = new LiteralResult;
            low_field = new HexDigitResult;
            low_high_field = new HexDigitResult;
            low_low_field = new HexDigitResult;
            token_field = new NameResult;
        }

        if (true && string_parser_instance.ParseSingle(index, "0x") && hex_digit_parser_instance.ParseSingleSave(index, high_field) && hex_digit_parser_instance.ParseSingleSave(index, low_field)) {
            instance.SetHigh(high_field.GetValue());
            instance.SetHighHigh(high_high_field.GetValue());
            instance.SetHighLow(high_low_field.GetValue());
            instance.SetLiteral(literal_field.GetValue());
            instance.SetLow(low_field.GetValue());
            instance.SetLowHigh(low_high_field.GetValue());
            instance.SetLowLow(low_low_field.GetValue());
            instance.SetToken(token_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            high_field = new HexDigitResult;
            high_high_field = new HexDigitResult;
            high_low_field = new HexDigitResult;
            literal_field = new LiteralResult;
            low_field = new HexDigitResult;
            low_high_field = new HexDigitResult;
            low_low_field = new HexDigitResult;
            token_field = new NameResult;
        }

        if (true && string_parser_instance.ParseSingle(index, "\"") && literal_parser_instance.ParseSingleSave(index, literal_field) && string_parser_instance.ParseSingle(index, "\"")) {
            instance.SetHigh(high_field.GetValue());
            instance.SetHighHigh(high_high_field.GetValue());
            instance.SetHighLow(high_low_field.GetValue());
            instance.SetLiteral(literal_field.GetValue());
            instance.SetLow(low_field.GetValue());
            instance.SetLowHigh(low_high_field.GetValue());
            instance.SetLowLow(low_low_field.GetValue());
            instance.SetToken(token_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            high_field = new HexDigitResult;
            high_high_field = new HexDigitResult;
            high_low_field = new HexDigitResult;
            literal_field = new LiteralResult;
            low_field = new HexDigitResult;
            low_high_field = new HexDigitResult;
            low_low_field = new HexDigitResult;
            token_field = new NameResult;
        }

        if (true && string_parser_instance.ParseSingle(index, "[0x") && hex_digit_parser_instance.ParseSingleSave(index, low_high_field) && hex_digit_parser_instance.ParseSingleSave(index, low_low_field) && string_parser_instance.ParseSingle(index, "-0x") && hex_digit_parser_instance.ParseSingleSave(index, high_high_field) && hex_digit_parser_instance.ParseSingleSave(index, high_low_field) && string_parser_instance.ParseSingle(index, "]")) {
            instance.SetHigh(high_field.GetValue());
            instance.SetHighHigh(high_high_field.GetValue());
            instance.SetHighLow(high_low_field.GetValue());
            instance.SetLiteral(literal_field.GetValue());
            instance.SetLow(low_field.GetValue());
            instance.SetLowHigh(low_high_field.GetValue());
            instance.SetLowLow(low_low_field.GetValue());
            instance.SetToken(token_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            high_field = new HexDigitResult;
            high_high_field = new HexDigitResult;
            high_low_field = new HexDigitResult;
            literal_field = new LiteralResult;
            low_field = new HexDigitResult;
            low_high_field = new HexDigitResult;
            low_low_field = new HexDigitResult;
            token_field = new NameResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        SimpleTokenResult result = new SimpleTokenResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, SimpleTokenResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        SimpleTokenResult result = new SimpleTokenResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, SimpleTokenListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        SimpleToken[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            SimpleTokenResult result = new SimpleTokenResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        SimpleTokenListResult result = new SimpleTokenListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class SimpleTokenResult
{
    function void SetValue(SimpleToken new_value) { value = new_value; }
    function SimpleToken GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    SimpleToken value;
    bool result;
}

class SimpleTokenListResult
{
    function void SetValue(SimpleToken[] new_value) { value = new_value; }
    function SimpleToken[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    SimpleToken[] value;
    bool result;
}

class SimpleToken
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetHigh(HexDigit input_value) { high_field = input_value; }
    function HexDigit GetHigh() { return high_field; }
    function void SetHighHigh(HexDigit input_value) { high_high_field = input_value; }
    function HexDigit GetHighHigh() { return high_high_field; }
    function void SetHighLow(HexDigit input_value) { high_low_field = input_value; }
    function HexDigit GetHighLow() { return high_low_field; }
    function void SetLiteral(Literal input_value) { literal_field = input_value; }
    function Literal GetLiteral() { return literal_field; }
    function void SetLow(HexDigit input_value) { low_field = input_value; }
    function HexDigit GetLow() { return low_field; }
    function void SetLowHigh(HexDigit input_value) { low_high_field = input_value; }
    function HexDigit GetLowHigh() { return low_high_field; }
    function void SetLowLow(HexDigit input_value) { low_low_field = input_value; }
    function HexDigit GetLowLow() { return low_low_field; }
    function void SetToken(Name input_value) { token_field = input_value; }
    function Name GetToken() { return token_field; }

    LengthString length_string;
    HexDigit high_field;
    HexDigit high_high_field;
    HexDigit high_low_field;
    Literal literal_field;
    HexDigit low_field;
    HexDigit low_high_field;
    HexDigit low_low_field;
    Name token_field;
}

class ModifierParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ModifierResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Modifier instance = new Modifier;
        CardinalityResult cardinality_field = new CardinalityResult;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && string_parser_instance.ParseSingle(index, "*")) {
            instance.SetCardinality(cardinality_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            cardinality_field = new CardinalityResult;
        }

        if (true && string_parser_instance.ParseSingle(index, "?")) {
            instance.SetCardinality(cardinality_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            cardinality_field = new CardinalityResult;
        }

        if (true && string_parser_instance.ParseSingle(index, "+")) {
            instance.SetCardinality(cardinality_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            cardinality_field = new CardinalityResult;
        }

        if (true && string_parser_instance.ParseSingle(index, "{") && whitespace_parser_instance.ParseMany(index, 0, -1) && cardinality_parser_instance.ParseSingleSave(index, cardinality_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "}")) {
            instance.SetCardinality(cardinality_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            cardinality_field = new CardinalityResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ModifierResult result = new ModifierResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ModifierResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ModifierResult result = new ModifierResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ModifierListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Modifier[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ModifierResult result = new ModifierResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ModifierListResult result = new ModifierListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ModifierResult
{
    function void SetValue(Modifier new_value) { value = new_value; }
    function Modifier GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Modifier value;
    bool result;
}

class ModifierListResult
{
    function void SetValue(Modifier[] new_value) { value = new_value; }
    function Modifier[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Modifier[] value;
    bool result;
}

class Modifier
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetCardinality(Cardinality input_value) { cardinality_field = input_value; }
    function Cardinality GetCardinality() { return cardinality_field; }

    LengthString length_string;
    Cardinality cardinality_field;
}

class CardinalityParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, CardinalityResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Cardinality instance = new Cardinality;
        NumberResult count_field = new NumberResult;
        NumberResult maximum_field = new NumberResult;
        NumberResult minimum_field = new NumberResult;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && number_parser_instance.ParseSingleSave(index, minimum_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ",") && whitespace_parser_instance.ParseMany(index, 0, -1) && number_parser_instance.ParseSingleSave(index, maximum_field)) {
            instance.SetCount(count_field.GetValue());
            instance.SetMaximum(maximum_field.GetValue());
            instance.SetMinimum(minimum_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            count_field = new NumberResult;
            maximum_field = new NumberResult;
            minimum_field = new NumberResult;
        }

        if (true && number_parser_instance.ParseSingleSave(index, minimum_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ",")) {
            instance.SetCount(count_field.GetValue());
            instance.SetMaximum(maximum_field.GetValue());
            instance.SetMinimum(minimum_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            count_field = new NumberResult;
            maximum_field = new NumberResult;
            minimum_field = new NumberResult;
        }

        if (true && number_parser_instance.ParseSingleSave(index, count_field)) {
            instance.SetCount(count_field.GetValue());
            instance.SetMaximum(maximum_field.GetValue());
            instance.SetMinimum(minimum_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            count_field = new NumberResult;
            maximum_field = new NumberResult;
            minimum_field = new NumberResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        CardinalityResult result = new CardinalityResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, CardinalityResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        CardinalityResult result = new CardinalityResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, CardinalityListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Cardinality[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            CardinalityResult result = new CardinalityResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        CardinalityListResult result = new CardinalityListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class CardinalityResult
{
    function void SetValue(Cardinality new_value) { value = new_value; }
    function Cardinality GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Cardinality value;
    bool result;
}

class CardinalityListResult
{
    function void SetValue(Cardinality[] new_value) { value = new_value; }
    function Cardinality[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Cardinality[] value;
    bool result;
}

class Cardinality
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetCount(Number input_value) { count_field = input_value; }
    function Number GetCount() { return count_field; }
    function void SetMaximum(Number input_value) { maximum_field = input_value; }
    function Number GetMaximum() { return maximum_field; }
    function void SetMinimum(Number input_value) { minimum_field = input_value; }
    function Number GetMinimum() { return minimum_field; }

    LengthString length_string;
    Number count_field;
    Number maximum_field;
    Number minimum_field;
}

class NameParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, NameResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Name instance = new Name;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && name_character_parser_instance.ParseMany(index, 1, -1)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        NameResult result = new NameResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, NameResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        NameResult result = new NameResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, NameListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Name[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            NameResult result = new NameResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        NameListResult result = new NameListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class NameResult
{
    function void SetValue(Name new_value) { value = new_value; }
    function Name GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Name value;
    bool result;
}

class NameListResult
{
    function void SetValue(Name[] new_value) { value = new_value; }
    function Name[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Name[] value;
    bool result;
}

class Name
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class NameCharacterParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, NameCharacterResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        NameCharacter instance = new NameCharacter;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && character_range_parser_instance.ParseSingle(index, 0x30, 0x39)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_range_parser_instance.ParseSingle(index, 0x41, 0x5A)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "_")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_range_parser_instance.ParseSingle(index, 0x61, 0x7A)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        NameCharacterResult result = new NameCharacterResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, NameCharacterResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        NameCharacterResult result = new NameCharacterResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, NameCharacterListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        NameCharacter[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            NameCharacterResult result = new NameCharacterResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        NameCharacterListResult result = new NameCharacterListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class NameCharacterResult
{
    function void SetValue(NameCharacter new_value) { value = new_value; }
    function NameCharacter GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    NameCharacter value;
    bool result;
}

class NameCharacterListResult
{
    function void SetValue(NameCharacter[] new_value) { value = new_value; }
    function NameCharacter[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    NameCharacter[] value;
    bool result;
}

class NameCharacter
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class NumberParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, NumberResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Number instance = new Number;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && digit_parser_instance.ParseMany(index, 1, -1)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        NumberResult result = new NumberResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, NumberResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        NumberResult result = new NumberResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, NumberListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Number[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            NumberResult result = new NumberResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        NumberListResult result = new NumberListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class NumberResult
{
    function void SetValue(Number new_value) { value = new_value; }
    function Number GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Number value;
    bool result;
}

class NumberListResult
{
    function void SetValue(Number[] new_value) { value = new_value; }
    function Number[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Number[] value;
    bool result;
}

class Number
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class DigitParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, DigitResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Digit instance = new Digit;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && character_range_parser_instance.ParseSingle(index, 0x30, 0x39)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        DigitResult result = new DigitResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, DigitResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        DigitResult result = new DigitResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, DigitListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Digit[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            DigitResult result = new DigitResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        DigitListResult result = new DigitListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class DigitResult
{
    function void SetValue(Digit new_value) { value = new_value; }
    function Digit GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Digit value;
    bool result;
}

class DigitListResult
{
    function void SetValue(Digit[] new_value) { value = new_value; }
    function Digit[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Digit[] value;
    bool result;
}

class Digit
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class PunctuationParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, PunctuationResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Punctuation instance = new Punctuation;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && string_parser_instance.ParseSingle(index, ",")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, ".")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "?")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "!")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        PunctuationResult result = new PunctuationResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, PunctuationResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        PunctuationResult result = new PunctuationResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, PunctuationListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Punctuation[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            PunctuationResult result = new PunctuationResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        PunctuationListResult result = new PunctuationListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class PunctuationResult
{
    function void SetValue(Punctuation new_value) { value = new_value; }
    function Punctuation GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Punctuation value;
    bool result;
}

class PunctuationListResult
{
    function void SetValue(Punctuation[] new_value) { value = new_value; }
    function Punctuation[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Punctuation[] value;
    bool result;
}

class Punctuation
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class CommentCharacterParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, CommentCharacterResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        CommentCharacter instance = new CommentCharacter;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && name_character_parser_instance.ParseSingle(index)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && punctuation_parser_instance.ParseSingle(index)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, " ")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "#")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        CommentCharacterResult result = new CommentCharacterResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, CommentCharacterResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        CommentCharacterResult result = new CommentCharacterResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, CommentCharacterListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        CommentCharacter[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            CommentCharacterResult result = new CommentCharacterResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        CommentCharacterListResult result = new CommentCharacterListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class CommentCharacterResult
{
    function void SetValue(CommentCharacter new_value) { value = new_value; }
    function CommentCharacter GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    CommentCharacter value;
    bool result;
}

class CommentCharacterListResult
{
    function void SetValue(CommentCharacter[] new_value) { value = new_value; }
    function CommentCharacter[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    CommentCharacter[] value;
    bool result;
}

class CommentCharacter
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class CommentParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, CommentResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Comment instance = new Comment;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "#") && comment_character_parser_instance.ParseMany(index, 0, -1) && eol_parser_instance.ParseSingle(index)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        CommentResult result = new CommentResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, CommentResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        CommentResult result = new CommentResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, CommentListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Comment[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            CommentResult result = new CommentResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        CommentListResult result = new CommentListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class CommentResult
{
    function void SetValue(Comment new_value) { value = new_value; }
    function Comment GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Comment value;
    bool result;
}

class CommentListResult
{
    function void SetValue(Comment[] new_value) { value = new_value; }
    function Comment[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Comment[] value;
    bool result;
}

class Comment
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class LiteralParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, LiteralResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Literal instance = new Literal;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && literal_character_parser_instance.ParseMany(index, 0, -1)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        LiteralResult result = new LiteralResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, LiteralResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        LiteralResult result = new LiteralResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, LiteralListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Literal[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            LiteralResult result = new LiteralResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        LiteralListResult result = new LiteralListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class LiteralResult
{
    function void SetValue(Literal new_value) { value = new_value; }
    function Literal GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Literal value;
    bool result;
}

class LiteralListResult
{
    function void SetValue(Literal[] new_value) { value = new_value; }
    function Literal[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Literal[] value;
    bool result;
}

class Literal
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class LiteralCharacterParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, LiteralCharacterResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        LiteralCharacter instance = new LiteralCharacter;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && character_range_parser_instance.ParseSingle(index, 0x00, 0x21)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "\\\"")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_range_parser_instance.ParseSingle(index, 0x23, 0x5B)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "\\\\")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_range_parser_instance.ParseSingle(index, 0x5D, 0xFF)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        LiteralCharacterResult result = new LiteralCharacterResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, LiteralCharacterResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        LiteralCharacterResult result = new LiteralCharacterResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, LiteralCharacterListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LiteralCharacter[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            LiteralCharacterResult result = new LiteralCharacterResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        LiteralCharacterListResult result = new LiteralCharacterListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class LiteralCharacterResult
{
    function void SetValue(LiteralCharacter new_value) { value = new_value; }
    function LiteralCharacter GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    LiteralCharacter value;
    bool result;
}

class LiteralCharacterListResult
{
    function void SetValue(LiteralCharacter[] new_value) { value = new_value; }
    function LiteralCharacter[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    LiteralCharacter[] value;
    bool result;
}

class LiteralCharacter
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class HexDigitParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, HexDigitResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        HexDigit instance = new HexDigit;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && character_range_parser_instance.ParseSingle(index, 0x30, 0x39)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_range_parser_instance.ParseSingle(index, 0x41, 0x46)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        HexDigitResult result = new HexDigitResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, HexDigitResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        HexDigitResult result = new HexDigitResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, HexDigitListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        HexDigit[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            HexDigitResult result = new HexDigitResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        HexDigitListResult result = new HexDigitListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class HexDigitResult
{
    function void SetValue(HexDigit new_value) { value = new_value; }
    function HexDigit GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    HexDigit value;
    bool result;
}

class HexDigitListResult
{
    function void SetValue(HexDigit[] new_value) { value = new_value; }
    function HexDigit[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    HexDigit[] value;
    bool result;
}

class HexDigit
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class WhitespaceParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, WhitespaceResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Whitespace instance = new Whitespace;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && character_range_parser_instance.ParseSingle(index, 0x00, 0x09)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_range_parser_instance.ParseSingle(index, 0x0B, 0x0C)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_range_parser_instance.ParseSingle(index, 0x0E, 0x20)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        WhitespaceResult result = new WhitespaceResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, WhitespaceResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        WhitespaceResult result = new WhitespaceResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, WhitespaceListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Whitespace[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            WhitespaceResult result = new WhitespaceResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        WhitespaceListResult result = new WhitespaceListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class WhitespaceResult
{
    function void SetValue(Whitespace new_value) { value = new_value; }
    function Whitespace GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Whitespace value;
    bool result;
}

class WhitespaceListResult
{
    function void SetValue(Whitespace[] new_value) { value = new_value; }
    function Whitespace[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Whitespace[] value;
    bool result;
}

class Whitespace
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class EolParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, EolResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Eol instance = new Eol;

        GrammarParser grammar_parser_instance = parser_network.GetGrammarParser();
        RuleParser rule_parser_instance = parser_network.GetRuleParser();
        ExpressionParser expression_parser_instance = parser_network.GetExpressionParser();
        TokenParser token_parser_instance = parser_network.GetTokenParser();
        SimpleTokenParser simple_token_parser_instance = parser_network.GetSimpleTokenParser();
        ModifierParser modifier_parser_instance = parser_network.GetModifierParser();
        CardinalityParser cardinality_parser_instance = parser_network.GetCardinalityParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        PunctuationParser punctuation_parser_instance = parser_network.GetPunctuationParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        HexDigitParser hex_digit_parser_instance = parser_network.GetHexDigitParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        EolParser eol_parser_instance = parser_network.GetEolParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && character_parser_instance.ParseSingle(index, 0x0A) && character_parser_instance.ParseSingle(index, 0x0D)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_parser_instance.ParseSingle(index, 0x0D) && character_parser_instance.ParseSingle(index, 0x0A)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_parser_instance.ParseSingle(index, 0x0A)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_parser_instance.ParseSingle(index, 0x0D)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        EolResult result = new EolResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, EolResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        EolResult result = new EolResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, EolListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Eol[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            EolResult result = new EolResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        EolListResult result = new EolListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class EolResult
{
    function void SetValue(Eol new_value) { value = new_value; }
    function Eol GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Eol value;
    bool result;
}

class EolListResult
{
    function void SetValue(Eol[] new_value) { value = new_value; }
    function Eol[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Eol[] value;
    bool result;
}

class Eol
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}
